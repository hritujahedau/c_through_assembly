

.section .rodata
	.msg_p_black:
		.string		"\n color is black\n"
	.msg_p_red:
		.string		"\n color is red\n"
	.msg_p_green:
		.string		"\n color is green\n"
	.msg_p_blue:
		.string		"\n color is blue\n"
	.msg_p_white:
		.string		"\n color is white\n"
	.msg_p_other:
		.string		"\n color is other\n"

.section .data

	.globl 	color
	.type	color, @object
	.size	color, 4
color:
	.zero	4

.section .text
	.globl	_start
	.type	_start, @function
_start:

	#prolgoue
	pushl	%ebp
	movl	%esp, %ebp

	# main code

	movl	$2, color
	movl	color, %eax
	cmpl	$0, %eax
	je	.print_black

	movl	color, %eax
	cmpl	$1, %eax
	je	.print_red
	
	movl	color, %eax
	cmpl	$2, %eax
	je	.print_green

	movl	color, %eax
	cmpl	$3, %eax
	je	.print_blue

	movl	color, %eax
	cmpl	$4, %eax
	je	.print_white

	jmp 	.print_other

	# conditions
	
	.print_black:
	pushl	$.msg_p_black
	call	printf
	addl	$4, %esp
	jmp	.epilogue

	.print_red:
	pushl	$.msg_p_red
	call	printf
	addl	$4, %esp
	jmp	.epilogue

	.print_green:
	pushl	$.msg_p_green
	call	printf
	addl	$4, %esp
	jmp 	.epilogue

	.print_blue:
	pushl	$.msg_p_blue
	call	printf
	addl	$4, %esp
	jmp	.epilogue

	.print_white:
	pushl	$.msg_p_white
	call	printf
	addl	$4, %esp
	jmp 	.epilogue

	.print_other:
	pushl	$.msg_p_other
	call	printf
	addl	$4, %esp


	#epilogue
	.epilogue:
	pushl	$0
	call	exit
		
	
